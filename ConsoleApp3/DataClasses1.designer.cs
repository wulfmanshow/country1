#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp3
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Country")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertCapital(Capital instance);
    partial void UpdateCapital(Capital instance);
    partial void DeleteCapital(Capital instance);
    partial void InsertCities(Cities instance);
    partial void UpdateCities(Cities instance);
    partial void DeleteCities(Cities instance);
    partial void InsertCountrys(Countrys instance);
    partial void UpdateCountrys(Countrys instance);
    partial void DeleteCountrys(Countrys instance);
    partial void InsertPartOfTheWorld(PartOfTheWorld instance);
    partial void UpdatePartOfTheWorld(PartOfTheWorld instance);
    partial void DeletePartOfTheWorld(PartOfTheWorld instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::ConsoleApp3.Properties.Settings.Default.CountryConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Capital> Capital
		{
			get
			{
				return this.GetTable<Capital>();
			}
		}
		
		public System.Data.Linq.Table<Cities> Cities
		{
			get
			{
				return this.GetTable<Cities>();
			}
		}
		
		public System.Data.Linq.Table<Countrys> Countrys
		{
			get
			{
				return this.GetTable<Countrys>();
			}
		}
		
		public System.Data.Linq.Table<PartOfTheWorld> PartOfTheWorld
		{
			get
			{
				return this.GetTable<PartOfTheWorld>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Capital")]
	public partial class Capital : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameCapital;
		
		private long _Population;
		
		private EntitySet<Countrys> _Countrys;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameCapitalChanging(string value);
    partial void OnNameCapitalChanged();
    partial void OnPopulationChanging(long value);
    partial void OnPopulationChanged();
    #endregion
		
		public Capital()
		{
			this._Countrys = new EntitySet<Countrys>(new Action<Countrys>(this.attach_Countrys), new Action<Countrys>(this.detach_Countrys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCapital", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameCapital
		{
			get
			{
				return this._NameCapital;
			}
			set
			{
				if ((this._NameCapital != value))
				{
					this.OnNameCapitalChanging(value);
					this.SendPropertyChanging();
					this._NameCapital = value;
					this.SendPropertyChanged("NameCapital");
					this.OnNameCapitalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Population", DbType="BigInt NOT NULL")]
		public long Population
		{
			get
			{
				return this._Population;
			}
			set
			{
				if ((this._Population != value))
				{
					this.OnPopulationChanging(value);
					this.SendPropertyChanging();
					this._Population = value;
					this.SendPropertyChanged("Population");
					this.OnPopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Capital_Countrys", Storage="_Countrys", ThisKey="Id", OtherKey="CapitalId")]
		public EntitySet<Countrys> Countrys
		{
			get
			{
				return this._Countrys;
			}
			set
			{
				this._Countrys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countrys(Countrys entity)
		{
			this.SendPropertyChanging();
			entity.Capital = this;
		}
		
		private void detach_Countrys(Countrys entity)
		{
			this.SendPropertyChanging();
			entity.Capital = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Cities")]
	public partial class Cities : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameCity;
		
		private long _Population;
		
		private System.Nullable<int> _CountryId;
		
		private EntityRef<Countrys> _Countrys;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameCityChanging(string value);
    partial void OnNameCityChanged();
    partial void OnPopulationChanging(long value);
    partial void OnPopulationChanged();
    partial void OnCountryIdChanging(System.Nullable<int> value);
    partial void OnCountryIdChanged();
    #endregion
		
		public Cities()
		{
			this._Countrys = default(EntityRef<Countrys>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCity", DbType="NVarChar(30) NOT NULL", CanBeNull=false)]
		public string NameCity
		{
			get
			{
				return this._NameCity;
			}
			set
			{
				if ((this._NameCity != value))
				{
					this.OnNameCityChanging(value);
					this.SendPropertyChanging();
					this._NameCity = value;
					this.SendPropertyChanged("NameCity");
					this.OnNameCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Population", DbType="BigInt NOT NULL")]
		public long Population
		{
			get
			{
				return this._Population;
			}
			set
			{
				if ((this._Population != value))
				{
					this.OnPopulationChanging(value);
					this.SendPropertyChanging();
					this._Population = value;
					this.SendPropertyChanged("Population");
					this.OnPopulationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryId", DbType="Int")]
		public System.Nullable<int> CountryId
		{
			get
			{
				return this._CountryId;
			}
			set
			{
				if ((this._CountryId != value))
				{
					if (this._Countrys.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCountryIdChanging(value);
					this.SendPropertyChanging();
					this._CountryId = value;
					this.SendPropertyChanged("CountryId");
					this.OnCountryIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Countrys_Cities", Storage="_Countrys", ThisKey="CountryId", OtherKey="Id", IsForeignKey=true)]
		public Countrys Countrys
		{
			get
			{
				return this._Countrys.Entity;
			}
			set
			{
				Countrys previousValue = this._Countrys.Entity;
				if (((previousValue != value) 
							|| (this._Countrys.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Countrys.Entity = null;
						previousValue.Cities.Remove(this);
					}
					this._Countrys.Entity = value;
					if ((value != null))
					{
						value.Cities.Add(this);
						this._CountryId = value.Id;
					}
					else
					{
						this._CountryId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Countrys");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countrys")]
	public partial class Countrys : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _NameCountry;
		
		private int _CapitalId;
		
		private long _People;
		
		private long _CountryArea;
		
		private int _IdPartOfTheWorld;
		
		private int _CitiesId;
		
		private EntitySet<Cities> _Cities;
		
		private EntityRef<Capital> _Capital;
		
		private EntityRef<PartOfTheWorld> _PartOfTheWorld;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameCountryChanging(string value);
    partial void OnNameCountryChanged();
    partial void OnCapitalIdChanging(int value);
    partial void OnCapitalIdChanged();
    partial void OnPeopleChanging(long value);
    partial void OnPeopleChanged();
    partial void OnCountryAreaChanging(long value);
    partial void OnCountryAreaChanged();
    partial void OnIdPartOfTheWorldChanging(int value);
    partial void OnIdPartOfTheWorldChanged();
    partial void OnCitiesIdChanging(int value);
    partial void OnCitiesIdChanged();
    #endregion
		
		public Countrys()
		{
			this._Cities = new EntitySet<Cities>(new Action<Cities>(this.attach_Cities), new Action<Cities>(this.detach_Cities));
			this._Capital = default(EntityRef<Capital>);
			this._PartOfTheWorld = default(EntityRef<PartOfTheWorld>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NameCountry", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string NameCountry
		{
			get
			{
				return this._NameCountry;
			}
			set
			{
				if ((this._NameCountry != value))
				{
					this.OnNameCountryChanging(value);
					this.SendPropertyChanging();
					this._NameCountry = value;
					this.SendPropertyChanged("NameCountry");
					this.OnNameCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CapitalId", DbType="Int NOT NULL")]
		public int CapitalId
		{
			get
			{
				return this._CapitalId;
			}
			set
			{
				if ((this._CapitalId != value))
				{
					if (this._Capital.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCapitalIdChanging(value);
					this.SendPropertyChanging();
					this._CapitalId = value;
					this.SendPropertyChanged("CapitalId");
					this.OnCapitalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_People", DbType="BigInt NOT NULL")]
		public long People
		{
			get
			{
				return this._People;
			}
			set
			{
				if ((this._People != value))
				{
					this.OnPeopleChanging(value);
					this.SendPropertyChanging();
					this._People = value;
					this.SendPropertyChanged("People");
					this.OnPeopleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CountryArea", DbType="BigInt NOT NULL")]
		public long CountryArea
		{
			get
			{
				return this._CountryArea;
			}
			set
			{
				if ((this._CountryArea != value))
				{
					this.OnCountryAreaChanging(value);
					this.SendPropertyChanging();
					this._CountryArea = value;
					this.SendPropertyChanged("CountryArea");
					this.OnCountryAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdPartOfTheWorld", DbType="Int NOT NULL")]
		public int IdPartOfTheWorld
		{
			get
			{
				return this._IdPartOfTheWorld;
			}
			set
			{
				if ((this._IdPartOfTheWorld != value))
				{
					if (this._PartOfTheWorld.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdPartOfTheWorldChanging(value);
					this.SendPropertyChanging();
					this._IdPartOfTheWorld = value;
					this.SendPropertyChanged("IdPartOfTheWorld");
					this.OnIdPartOfTheWorldChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CitiesId", DbType="Int NOT NULL")]
		public int CitiesId
		{
			get
			{
				return this._CitiesId;
			}
			set
			{
				if ((this._CitiesId != value))
				{
					this.OnCitiesIdChanging(value);
					this.SendPropertyChanging();
					this._CitiesId = value;
					this.SendPropertyChanged("CitiesId");
					this.OnCitiesIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Countrys_Cities", Storage="_Cities", ThisKey="Id", OtherKey="CountryId")]
		public EntitySet<Cities> Cities
		{
			get
			{
				return this._Cities;
			}
			set
			{
				this._Cities.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Capital_Countrys", Storage="_Capital", ThisKey="CapitalId", OtherKey="Id", IsForeignKey=true)]
		public Capital Capital
		{
			get
			{
				return this._Capital.Entity;
			}
			set
			{
				Capital previousValue = this._Capital.Entity;
				if (((previousValue != value) 
							|| (this._Capital.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Capital.Entity = null;
						previousValue.Countrys.Remove(this);
					}
					this._Capital.Entity = value;
					if ((value != null))
					{
						value.Countrys.Add(this);
						this._CapitalId = value.Id;
					}
					else
					{
						this._CapitalId = default(int);
					}
					this.SendPropertyChanged("Capital");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartOfTheWorld_Countrys", Storage="_PartOfTheWorld", ThisKey="IdPartOfTheWorld", OtherKey="Id", IsForeignKey=true)]
		public PartOfTheWorld PartOfTheWorld
		{
			get
			{
				return this._PartOfTheWorld.Entity;
			}
			set
			{
				PartOfTheWorld previousValue = this._PartOfTheWorld.Entity;
				if (((previousValue != value) 
							|| (this._PartOfTheWorld.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PartOfTheWorld.Entity = null;
						previousValue.Countrys.Remove(this);
					}
					this._PartOfTheWorld.Entity = value;
					if ((value != null))
					{
						value.Countrys.Add(this);
						this._IdPartOfTheWorld = value.Id;
					}
					else
					{
						this._IdPartOfTheWorld = default(int);
					}
					this.SendPropertyChanged("PartOfTheWorld");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Cities(Cities entity)
		{
			this.SendPropertyChanging();
			entity.Countrys = this;
		}
		
		private void detach_Cities(Cities entity)
		{
			this.SendPropertyChanging();
			entity.Countrys = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PartOfTheWorld")]
	public partial class PartOfTheWorld : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Part;
		
		private EntitySet<Countrys> _Countrys;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnPartChanging(string value);
    partial void OnPartChanged();
    #endregion
		
		public PartOfTheWorld()
		{
			this._Countrys = new EntitySet<Countrys>(new Action<Countrys>(this.attach_Countrys), new Action<Countrys>(this.detach_Countrys));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Part", DbType="NVarChar(20)")]
		public string Part
		{
			get
			{
				return this._Part;
			}
			set
			{
				if ((this._Part != value))
				{
					this.OnPartChanging(value);
					this.SendPropertyChanging();
					this._Part = value;
					this.SendPropertyChanged("Part");
					this.OnPartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PartOfTheWorld_Countrys", Storage="_Countrys", ThisKey="Id", OtherKey="IdPartOfTheWorld")]
		public EntitySet<Countrys> Countrys
		{
			get
			{
				return this._Countrys;
			}
			set
			{
				this._Countrys.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countrys(Countrys entity)
		{
			this.SendPropertyChanging();
			entity.PartOfTheWorld = this;
		}
		
		private void detach_Countrys(Countrys entity)
		{
			this.SendPropertyChanging();
			entity.PartOfTheWorld = null;
		}
	}
}
#pragma warning restore 1591
